// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        kotlin_version = "1.5.20"
        kotlin_serialization_version = "1.2.1"
        coroutines_version = "1.5.0"

        junit_version = "4.12"
        mockk_version = "1.11.0"
        assertk_version = "0.24"
        detekt_version = "1.17.1"
        jacoco_version = "0.8.7"

        bivrost_version = "v0.8.1"
        spongycastle_version = "1.58.0.0"
        kethereum_version = "0.83.4"
        khex_version = "1.0.0"
        khash_version = "1.0.0-RC5"
        kbase58_version = "0.2"
        uport_kotlin_common_version = "0.4.4"

        current_release_version = "0.4.0"
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "com.github.gnosis.bivrost-kotlin:bivrost-gradle-plugin:$bivrost_version"

        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"

        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

plugins {
    id "io.errorlab.gradle.vault" version "0.1.0"
}

apply plugin: "io.gitlab.arturbosch.detekt"

detekt {
    version = detekt_version
    input = files(
            "$projectDir"
    )
    config = files("${projectDir}/detekt.yml")
    baseline = file("${projectDir}/detekt_baseline.xml")
    parallel = true
    reports {
        xml {
            enabled = true
            destination = file("${project.buildDir}/reports/detekt.xml")
        }
        html {
            enabled = true
            destination = file("${project.buildDir}/reports/detekt.html")
        }
    }
}

allprojects {

    apply plugin: "jacoco"

    jacoco {
        toolVersion = jacoco_version
    }

    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
//        mavenLocal()
    }

//address warnings about multiple kotlin runtimes in classpath
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute module("org.jetbrains.kotlin:kotlin-stdlib-jre7") because "warning about multiple runtimes in the classpath" with module("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
            substitute module("org.jetbrains.kotlin:kotlin-stdlib-jre8") because "warning about multiple runtimes in the classpath" with module("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")

        }
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == "org.jetbrains.kotlin" && requested.name in [
                    "kotlin-reflect", "kotlin-stdlib", "kotlin-stdlib-common",
                    "kotlin-stdlib-jdk7", "kotlin-stdlib-jdk8",
            ]) {
                details.useVersion kotlin_version
            }
        }
    }
}

subprojects { subproject ->
    afterEvaluate {
        subproject.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
}

apply from: "publishing.gradle"

task clean(type: Delete) {
    delete rootProject.buildDir
}

task jacocoReport(type: JacocoReport) {
    subprojects { sub ->
        afterEvaluate {
            //subproject tasks can only be gathered after evaluation
            def testTasks = sub.tasks.withType(Test)
            dependsOn testTasks
            executionData testTasks
        }
        classDirectories.from(file("${sub.buildDir}/classes/java/main"))
        classDirectories.from(file("${sub.buildDir}/classes/kotlin/main"))
    }

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}
